{"ast":null,"code":"import axios from 'axios';\nimport { userConstants, apiUrl } from '../constants';\nexport const doLogin = data => {\n  return dispatch => {\n    dispatch(request());\n    return axios.post(`${apiUrl}login`, data).then(({\n      data\n    }) => {\n      if (data.status) {\n        dispatch(success(data.data));\n        localStorage.setItem('user_data', JSON.stringify({\n          id: data.data._id,\n          name: data.data.name,\n          email: data.data.email\n        }));\n      } else {\n        dispatch(failure(data.message));\n      }\n    }).catch(error => {\n      throw error;\n      dispatch(failure(error.message));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.LOGIN_REQUEST\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n};\nexport const getUsers = data => {\n  return dispatch => {\n    dispatch(request([]));\n    return axios.post(`${apiUrl}/getUsers`, data).then(({\n      data\n    }) => {\n      if (data.status) {\n        dispatch(success(data.data));\n      } else {\n        dispatch(failure(data.message));\n      }\n    }).catch(error => {\n      throw error;\n      dispatch(failure(error.message));\n    });\n  };\n\n  function request(users) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      users\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n};","map":{"version":3,"sources":["/Volumes/Transcend/Projects/NayabN_AzzkaNoor/SlotMachine/slotmachine/client/src/actions/user.actions.js"],"names":["axios","userConstants","apiUrl","doLogin","data","dispatch","request","post","then","status","success","localStorage","setItem","JSON","stringify","id","_id","name","email","failure","message","catch","error","type","LOGIN_REQUEST","user","LOGIN_SUCCESS","LOGIN_FAILURE","getUsers","users"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {userConstants, apiUrl} from '../constants';\n\n\nexport const doLogin = (data) => {\n    return (dispatch) => {\n        dispatch(request());\n        return axios.post(`${apiUrl}login`, data)\n            .then(({data}) => {\n                if (data.status) {\n                    dispatch(success(data.data));\n                    localStorage.setItem('user_data', JSON.stringify({\n                        id: data.data._id,\n                        name: data.data.name,\n                        email: data.data.email\n                    }));\n                } else {\n                    dispatch(failure(data.message));\n                }\n            })\n            .catch(error => {\n                throw(error);\n                dispatch(failure(error.message));\n            });\n    }\n\n    function request() {\n        return {type: userConstants.LOGIN_REQUEST}\n    }\n\n    function success(user) {\n        return {type: userConstants.LOGIN_SUCCESS, user}\n    }\n\n    function failure(error) {\n        return {type: userConstants.LOGIN_FAILURE, error}\n    }\n};\n\nexport const getUsers = (data) => {\n    return (dispatch) => {\n        dispatch(request([]));\n        return axios.post(`${apiUrl}/getUsers`, data)\n            .then(({data}) => {\n                if (data.status) {\n                    dispatch(success(data.data));\n                } else {\n                    dispatch(failure(data.message));\n                }\n            })\n            .catch(error => {\n                throw(error);\n                dispatch(failure(error.message));\n            });\n    }\n\n    function request(users) {\n        return {type: userConstants.LOGIN_REQUEST, users}\n    }\n\n    function success(users) {\n        return {type: userConstants.LOGIN_SUCCESS, users}\n    }\n\n    function failure(error) {\n        return {type: userConstants.LOGIN_FAILURE, error}\n    }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}